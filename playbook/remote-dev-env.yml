---
- hosts: remote_dev_hosts
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_pipelining: yes # Fix "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user"
    dev_user: 'ubuntu'
  tasks:
  - name: 'sshd: StreamLocalBindUnlink yes'
    ansible.builtin.copy:
      content: |
        StreamLocalBindUnlink yes
      dest: '/etc/ssh/sshd_config.d/StreamLocalBindUnlink.conf'
      mode: '0444'
      owner: 'root'
      group: 'root'
    notify: 'Restart sshd'

  - name: 'Install docker.io'
    ansible.builtin.apt:
      name: 'docker.io'

  - name: 'User {{ dev_user }} add groups docker,systemd-journal'
    ansible.builtin.user:
      name: '{{ dev_user }}'
      append: yes
      groups:
      - docker
      - systemd-journal

  - name: 'Install build-essential' # before linuxbrew (stop to install gcc by brew)
    ansible.builtin.apt:
      name: 'build-essential'

  - name: 'Install linuxbrew'
    ansible.builtin.shell:
      cmd: 'env NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
      creates: '/home/linuxbrew/.linuxbrew/bin/brew'
    become_user: '{{ dev_user }}'

  - name: 'Install using linuxbrew'
    community.general.homebrew:
      name: '{{ item }}'
      state: present
    become_user: '{{ dev_user }}'
    loop:
    - 'docker-compose'
    - 'aws-vault'
    - 'awscli' # aws-vault exec $profile -- aws s3 ls

  - name: 'Install pass'
    ansible.builtin.apt:
      name: 'pass'

  - name: 'Add lines to .bashrc'
    ansible.builtin.lineinfile:
      path: '/home/{{ dev_user }}/.bashrc'
      line: '{{ item }}'
    loop:
    - 'test -x /home/linuxbrew/.linuxbrew/bin/brew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
    - 'export EDITOR=vi'
    - ': ${XDG_CACHE_HOME:=~/.cache}; export XDG_CACHE_HOME'
    - ': ${XDG_CONFIG_HOME:=~/.config}; export XDG_CONFIG_HOME'
    - ': ${XDG_DATA_HOME:=~/.local/share}; export XDG_DATA_HOME'
    - ': ${XDG_STATE_HOME:=~/.local/state}; export XDG_STATE_HOME'
    - 'export AWS_CONFIG_FILE="$XDG_CONFIG_HOME"/aws/config'
    - 'export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME"/aws/credentials'
    - 'export AWS_VAULT_BACKEND=pass'
    - 'export AWS_VAULT_PASS_PREFIX=aws-vault'
    - 'export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker'
    - 'export PASSWORD_STORE_DIR="$XDG_DATA_HOME"/pass'

  - name: 'Remove lines from .bashrc'
    ansible.builtin.lineinfile:
      path: '/home/{{ dev_user }}/.bashrc'
      line: '{{ item }}'
      state: absent
    loop:
    - 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
    - 'export PASSWORD_STORE_GPG_OPTS=--no-autostart'

  - name: 'Stop gpg-agent'
    ansible.builtin.command:
      cmd: 'gpgconf --kill gpg-agent'
    become_user: '{{ dev_user }}'
    changed_when: no

  - name: 'Create directories'
    ansible.builtin.file:
      path: '{{ item }}'
      state: directory
      owner: '{{ dev_user }}'
      group: '{{ dev_user }}'
      mode: '0755'
    loop:
    - '/home/{{ dev_user }}/.config' # before run `byobu`
    - '/home/{{ dev_user }}/.config/git'
    - '/home/{{ dev_user }}/.config/docker/cli-plugins'
    - '/home/{{ dev_user }}/.local/share' # before run `less`
    - '/home/{{ dev_user }}/.gnupg' # before create gpg.conf

  - name: 'Stop autostart gpg-agent'
    ansible.builtin.lineinfile:
      path: '/home/{{ dev_user }}/.gnupg/gpg.conf'
      line: 'no-autostart'
      create: yes
      owner: '{{ dev_user }}'
      group: '{{ dev_user }}'
      mode: '0644'

  - name: 'Create .config/git/config' # before `git config`
    ansible.builtin.file:
      path: '/home/{{ dev_user }}/.config/git/config'
      state: touch
      owner: '{{ dev_user }}'
      group: '{{ dev_user }}'
      mode: '0644'
      modification_time: preserve
      access_time: preserve

  - name: 'Enable `docker compose`'
    ansible.builtin.file:
      src: '/home/linuxbrew/.linuxbrew/opt/docker-compose/bin/docker-compose'
      dest: '/home/{{ dev_user }}/.config/docker/cli-plugins/docker-compose'
      state: link
      owner: '{{ dev_user }}'
      group: '{{ dev_user }}'

  - name: 'Check linger'
    ansible.builtin.stat:
      path: '/var/lib/systemd/linger/{{ dev_user }}'
    register: result

  - name: 'Always restore linger'
    block:
    - name: 'Enable linger'
      ansible.builtin.command:
        cmd: 'loginctl enable-linger {{ dev_user }}'
        creates: '/var/lib/systemd/linger/{{ dev_user }}'
      when: 'not result.stat.exists'

    - name: 'Mask gpg-agent.service'
      ansible.builtin.systemd:
        name: '{{ item }}'
        scope: user
        masked: yes
      become_user: '{{ dev_user }}'
      loop:
      - gpg-agent.service
      - gpg-agent.socket
      - gpg-agent-ssh.socket
      - gpg-agent-extra.socket
      - gpg-agent-browser.socket
    always:
    - name: 'Disable linger'
      ansible.builtin.command:
        cmd: 'loginctl disable-linger {{ dev_user }}'
        removes: '/var/lib/systemd/linger/{{ dev_user }}'
      when: 'not result.stat.exists'

  handlers:
    - name: 'Restart sshd'
      systemd:
        name: 'ssh.service'
        state: restarted
        enabled: yes
